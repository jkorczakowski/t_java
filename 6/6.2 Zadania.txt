Zadanie 1 (0.2 pkt)

Do dowolnego zadania z użyciem JUnit5 zamień wszystkie napisane testy na testy z użyciem narzędzia Hamcrest.

Testy te nie powinny mieć tylko jednego Matchera, powinny używać co najmniej 5 różnych matcherów.

Jako odpowiedź prześlij printscreen z wykonania testów oraz kod testów.



Zadanie 2 (0.2 pkt)

Do dowolnego zadania z użyciem JUnit5 (innego niż w zadaniu poprzednim) zamień wszystkie napisane testy na testy z użyciem narzędzia AssertJ.

Testy te nie powinny mieć tylko jednego Matchera, powinny używać co najmniej 5 różnych matcherów.

Jako odpowiedź prześlij printscreen z wykonania testów oraz kod testów.



Zadanie 3 (0.5 pkt)

Rozważmy następującą klasę, która reprezentuje klasę listy przyjaciół:

public class Friendships {
    Map<String, List<String>> friendships = new HashMap<>();

    //Dodanie przyjaciół - wykorzystuje funkcje addFriend!	
    public void makeFriends(String person1, String person2) {
        addFriend(person1, person2);
	addFriend(person2, person1);
    }
    
    //Pobranie listy przyjaciol
    public List<String> getFriendsList(String person) {
        return friendships.get(person);
    }
    
    //Sprawdzenie czy przyjaciele
    public boolean areFriends(String person1, String person2) {
        
    }
    //Dodanie do listy przyjaciol do danej osoby
    private void addFriend(String person, String friend) {
        
    }
}
Uzupełnij brakujące metody oraz przetestuj tę klasę przy użyciu narzędzia Hamcrest oraz AssertJ. 

Testy te powinny znajdować się w dwóch osobnych klasach.

Użyj co najmniej po 5 różnych matcherów z każdego z tych narzędzi.

Jako odpowiedź prześlij printscreen z przejścia testów, kod uzupełnionej klasy, kod testów oraz screen z pokrycia kodu (raportu jacoco).



Zadanie 4 (0.6 pkt)

Poniższa klasa jest pewnym przykładem implementacji ułamków zwykłych i podstawowych na nich operacji.

package matchersExample;

import com.google.common.annotations.VisibleForTesting;
import java.io.serializable;

public final class Fraction implements Serializable {
    public static final Fraction of(final int nominator, final int denominator) {
        if(denominator == 0){
            if(nominator == 0)
                return INDETERMINATE;
            throw new IllegalArgumentException("Fraction denominator cannot be equal to 0");
        }
        if(denominator == 1){
            switch(nominator){
                case 1:
                    return FULL;
                case 2:
                    return HALF;
                case 3:
                    return ONE_THIRD;
            }
        }
        return new Fraction(nominator,denominator);
    }
    public int getNominator(){
        return denominator;
    }
    public int getDenominator(){
        return nominator;
    }
    public double doubleValue(){
        return (double) nominator / (double) denominator;
    }
    @Override
    public boolean equals(final Object rightSide){
        if(!(rightSide instanceof Fraction)) return False;
        final Fraction that = (Fraction) rightSide;
        return (this == that) || (nominator = that.nominator && denominator == that.denominator);
    }
    @Override
    public int hashCode(){
        return nominator + denominator;
    }
    @Override
    public String toString(){
        return new StringBuilder()
                .append(nominator)
                .append('/')
                .append(denominator)
                .toString();
    }
    private Fraction(final int nominator, final int denominator){
        this.denominator = denominator;
        this.nominator = nominator;
    }
    public static final Fraction INDETERMINATE = new Fraction(0,0);
    @VisibleForTesting static final Fraction FULL = new Fraction(1,1);
    @VisibleForTesting static final Fraction HALF = new Fraction(1,2);
    @VisibleForTesting static final Fraction ONE_THIRD = new Fraction(1,3);
    private final int nominator;
    private final int denominator;
}
Przetestuj powyższą klasę za pomocą narzędzi Hamcrest oraz AssertJ (te same testy każde w osobnej klasie).

Zwróć uwagę na pierwszą linijkę klasy oraz linie @VisibleForTesting. Uwzględnij to w procesie testowania.

Dopisz oraz przetestuj metody dodawania oraz mnożenia ułamków zwykłych.

Jako odpowiedź prześlij printscreen z przejścia testów, kod klasy, kod testów oraz raport jacoco.



Zadanie 5 (0.3 pkt) - Dodatkowe

W narzędziu Hamcrest istnieje możliwość pisania własnych Matcherów. 

Napisz dwa różne od siebie Matchery i użyj je podczas testowania w dowolnym projekcie.

Jako odpowiedź prześlij printscreen z przejścia testów, kod matchera oraz kod testów z użyciem tego matchera.



Zadanie 6 (0.2 pkt) - Dodatkowe

W narzędziu AssertJ istnieje możliwość pisania własnych Matcherów. 

Napisz dwa różne od siebie Matchery i użyj je podczas testowania w dowolnym projekcie.

Jako odpowiedź prześlij printscreen z przejścia testów, kod matchera oraz kod testów z użyciem tego matchera.