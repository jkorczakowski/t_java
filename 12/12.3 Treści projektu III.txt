REGUŁY ODDAWANIA PROJEKTU

Wybieramy jedno z poniższych zadań. Zadania różnią się poziomem trudności i są inaczej punktowane.

Każdy projekt ma być wykonany przy użyciu narzędzia Maven lub Gradle w JUnit5! Projekt nie powinien zawierać pliku jar oraz folderu target lub build.

Obowiązkowo każdy projekt ma być podpięty pod serwis TravisCi oraz Codacy lub CodeClimate (badge ma być podpięty pod repozytorium).

Oddanie projektu będzie odbywać się poprzez utworzenie Issue w repozytorium (szybsza opcja) lub pokazaniu go na zajęciach.

Projekty, w których nie będzie przechodzić polecenie mvn test lub gradle test będą projektami zaliczonymi na 0%

Termin oddania pierwszego projektu to: 03.06.2019 (100% - oddajemy na zajęciach). Następny termin (10.06.2019) będzie terminem na 50%. Wówczas liczy się moment utworzenia Issue (każdy dzień zwłoki obniża wartość procentową o około 10%). 

Ponadto pod ocenę będzie brany styl projektu: jak zapisane są testy i jak sprawdzane są asercje.

Testy powinny wykorzystywać wiele różnych asercji (a nie tylko assertEquals)!

Sprawdzenie projektu na zajęciach będzie polegało na jego obronie: będą to krótkie pytania i ewentualne drobne zmiany w kodzie podane przez prowadzącego!

Prowadzący będzie sprawdzał projekty samodzielnie do dnia 01.06.2019.

Link do GitHub Classroom: https://classroom.github.com/a/ZoVXD4Nm



Projekt 1 (25 pkt)

Przetestować dowolną stronę internetową przy użyciu technologii Selenium WebDriver w języku JAVA. Pod ocenę będą brane następujące aspekty:

(0.5 pkt) Kompilacja i bezbłędne uruchomienie projektu! Nie działanie implikuje wynikiem zero punktów!
(1 pkt) Testy w panelu logującym użytkownika
(1 pkt) Testy w panelu wyszukiwania
(2 pkt) Testy w operacjach CRUD (dodawanie, edytowanie, usuwanie)
(4 pkt) Testy jakiegokolwiek formularza (więcej punktów im bardziej rozbudowany formularz)
(3 pkt) Inne ciekawe testy strony nie wymienione powyżej
(1 pkt) Wykorzystanie modelu PageObject (połowa testów)
(1 pkt) Wyszukiwanie elementów różnymi metodami (metoda By...)
(1.5 pkt) Użycie Implicity/explicit/fluent wait (mniej więcej równa ilość w testach)
(2 pkt) Testowanie wykorzystując różne przeglądarki interfejsowe (max punktów za 4 przeglądarki)
(2 pkt) Testowanie wykorzystując przeglądarki bezinterfejsowe (co najmniej dwa)
(4 pkt) Napisanie testów akceptacyjnych (co najmniej 6 scenariuszy w tym jeden przy użyciu słowa kluczowego Examples oraz jeden przy użyciu zmiennej typu ExampleTable).
(1 pkt) Wykorzystanie PatternVariants, aliasów, typów scenariuszy w JBehave.
(1 pkt) Styl kodu.
Ponadto pod ocenę jest brane również: (Brak tych elementów: -1 pkt za podpunkt od obowiązkowej punktacji zadania!)

Historia projektu w repozytorium (co najmniej 20 commitów).
Różnorodne asercje (co najmniej 5 różnych).
Struktura projektu, jego podział na klasy.
Mieszanie różnych technologii ze sobą (dotyczy oczekiwania jawnego i niejawnego).
Nie potrzebne stosowanie klauzul: try ... catch, Exception.
Ponadto dodatkowo będzie brane pod ocenę:

(2 pkt) Wykorzystanie przeglądarek chmurowych (za dwie - 2 pkt).
(1 pkt) Obsługa alertów/okien.
(1 pkt) Nacjonalizacja scenariuszy w JBehave.
(1 pkt) Uruchamianie testów zgodnie z systemem operacyjnym (dotyczy dostępności różnych przeglądarek).
(3 pkt*) Inne ciekawe nietypowe rozwiązania nie podawane na zajęciach (punktacja zależna od wykorzystania narzędzia).