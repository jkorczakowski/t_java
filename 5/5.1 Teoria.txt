Maven to narzędzie do budowania kodu. Umożliwia on zarządzanie kodem, który obejmuje zbiór standardów, cykl życia projektu oraz
zarządzanie zależnościami. Główną zaletą używania narzędzia Maven dla nas będzie fakt, że projekt utworzony w tym narzędziu będzie działał w dowolnym środowisku IDE (Eclipse, NetBeans, InteliJ).
Projekty w Maven można tworzyć przez środowisko IDE lub przez wiersz poleceń (przy pomocy polecenia mvn).
Maven można zainstalować na każdym systemie operacyjnym. Warunkiem jest mieć oprogramowanie JAVA.
Ponadto narzędzia Maven można używać do projektów w innych językach "javopodobnych" programowania np. Scala

Maven charakteryzuje się kilkunastoma szablonami projektu. Można na przykład utworzyć aplikację webową (JAVA EE) lub zwykłą i wiele wiele innych.
Aby utworzyć projekt w Maven w wierszu poleceń należy użyć polecenia: 

mvn archetype:generate
Można też utworzyć projekt nie wchodząc w tryb interaktywny:

mvn archetype:generate -DgroupId=myApp -DartifactId=mavenTest2 -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
artifactId służy do identyfikacji projektu w kontekście innych projektów. W powyższym przypadku utworzy się katalog o nazwie mavenTest2

groupId jest to nazwa aplikacji bez podania wersji. W powyższym przypadku w katalogu mavenTest2 i jego podkatalogu src znajdzie się podkatalog myApp. Tak też będzie nazwana paczka w naszym projekcie.

Jest też możliwe podanie wersji naszego projektu poprzez adnotację version.



Maven to narzędzie do budowania kodu. Umożliwia on zarządzanie kodem, który obejmuje zbiór standardów, cykl życia projektu oraz
zarządzanie zależnościami. Główną zaletą używania narzędzia Maven dla nas będzie fakt, że projekt utworzony w tym narzędziu będzie działał w dowolnym środowisku IDE (Eclipse, NetBeans, InteliJ).
Projekty w Maven można tworzyć przez środowisko IDE lub przez wiersz poleceń (przy pomocy polecenia mvn).
Maven można zainstalować na każdym systemie operacyjnym. Warunkiem jest mieć oprogramowanie JAVA.
Ponadto narzędzia Maven można używać do projektów w innych językach "javopodobnych" programowania np. Scala

Maven charakteryzuje się kilkunastoma szablonami projektu. Można na przykład utworzyć aplikację webową (JAVA EE) lub zwykłą i wiele wiele innych.
Aby utworzyć projekt w Maven w wierszu poleceń należy użyć polecenia: 

mvn archetype:generate
Można też utworzyć projekt nie wchodząc w tryb interaktywny:

mvn archetype:generate -DgroupId=myApp -DartifactId=mavenTest2 -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
artifactId służy do identyfikacji projektu w kontekście innych projektów. W powyższym przypadku utworzy się katalog o nazwie mavenTest2

groupId jest to nazwa aplikacji bez podania wersji. W powyższym przypadku w katalogu mavenTest2 i jego podkatalogu src znajdzie się podkatalog myApp. Tak też będzie nazwana paczka w naszym projekcie.

Jest też możliwe podanie wersji naszego projektu poprzez adnotację version.



Poniższa tabela pokazuje podstawowe (nie wszystkie) komendy jakie można wywołać przy pomocy narzędzia Maven:

Komenda	Opis
mvn compile	Skompilowanie projektu, który znajduje się w folderze target.
mvn clean	Wyczyszczenie projektu (na przykład z folderu target)
mvn test	Uruchomienie fazy testów jednostkowych. Nazwy plików testowych powinny kończyć się słowem kluczowym Test.
mvn integration-test	Uruchomienie fazy testów integracyjnych
mvn package	Spakowanie projektu (do formatu .jar)
mvn verify	Sprawdzenie poprawności skompilowanej paczki
mvn site	Generuje dokumentacje do projektu
mvn install	Instaluje projekt w lokalnym repozytorium (domyślnie jest to /.m2/repository/ w katalogu domowym użytkownika)



Innym dość popularnym narzędziem jest Gradle. Jedną z jego zalet jest niewielka ilość szablonowego kodu, co pozwala tworzyć krótkie pliki konfiguracyjne. Narzędzie to używane jest i rozpowszechniane głownie w Google.
Jego plikiem konfiguracyjnym jest build.gradle, który zawiera informację wyrażone za pomocą języka Groovy lub Kotlin.

Również i tutaj znajduje się możliwość generowania szablonów projektu poprzez następujące polecenie (w tym przypadku Javy):

gradle init --type java-application
Wówczas w trybie interaktywnym wybieramy język konfiguracyjny, który będzie stosowany w pliku build.gradle oraz framework testowy (do wyboru mamy junit, TestNG oraz Spock).

Strona główna projektu gradle: https://gradle.org/

Na potrzeby dzisiejszego laboratorium będziemy korzystali z narzędzia Gradle w wersji 5.2, który jest do zainstalowania poprzez dodanie odpowiedniego repozytorium w systemie Ubuntu: https://launchpad.net/~cwchien/+archive/ubuntu/gradle



Wygenerowany plik konfiguracyjny (plik build.gradle) wygląda następująco: 

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.2/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    // Apply the application plugin to add support for building an application
    id 'application'
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    implementation 'com.google.guava:guava:27.0.1-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

// Define the main class for the application
mainClassName = 'FizzBuzzGradle.App'
plugins odpowiada za używane pluginy do projektu

repositories odpowiada za pobierania paczek, których będziemy używać w plugins oraz dependencies. Zamiast jcenter() można użyć mavenCentral().

dependencies odpowiada za zależności jakie używamy w projekcie. testImplementation odpowiada za bilbioteki testowe (oprócz testImplementation istnieje również testRuntime()). implementation odpowiada za wzięcie odpowiednich paczek w procesie kompilacji.



Poniższa tabela przedstawia podstawowe komendy (nie wszystkie) używane za pomocą narzędzia gradle:

Komenda	Opis komendy
gradle build	Buduje (kompiluje) projekt. Zbudowany projekt znajduje się w folderze build.
gradle clean	Czyści projekt (między innymi z folderu build)
gradle test	Odpala fazę testów
gradle task	Wyświetla listę zadań jakie można odpalić w projekcie
gradle projects	Wyświetla listę projektów 
gradle run	Odpala aplikację (poprzez odpalenia jakiegoś skryptu)
gradle check	Weryfikuje poprawność skompilowanego projektu



Narzędzie JaCoCo służy do raportowania pokrycia kodu w projekcie. Istnieje możliwość instalacji tego narzędzia zarówno w narzędziu Maven oraz Gradle. Wówczas podczas fazy testowej generuje się odpowiedni raport (w postaci pliku .html), w którym można podejrzeć pokrycie kodu plików źródłowych projektu. 

Należy również pamiętać o tym, że same narzędzia (Maven oraz Gradle) również generują raporty (w postaci plików .html), które zawierają przebieg testów jednostkowych.

Instalacja i konfiguracja narzędzia JaCoCo można znaleźć w internecie.